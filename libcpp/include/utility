#ifndef LIBCPP_UTILITY
#define LIBCPP_UTILITY

extern "C++"
{
	
namespace std
{
	template<typename Type>
	void swap(Type &lhs, Type &rhs);
	
	template<typename Type1, typename Type2>
	class pair
	{
	public:
		using first_type = Type1;
		using second_type = Type2;
	public:
		// constexpr pair();
		pair() = default;
		pair(const Type1 &lhs, const Type2 &rhs)
			: first(lhs), second(rhs) { }
		// constexpr pair(const Type1 &lhs, const Type2 &rhs);
		pair(const pair &rhs) = default;
		pair(pair &&rhs) = default;
		pair &operator=(pair<Type1, Type2> &rhs)
		{
			this->first = rhs.first;
			this->second = rhs.second;
			return *this;
		}

		void swap(pair<Type1, Type2> &rhs);
	public: // operator overloads
	    bool operator==(const pair<Type1, Type2> &rhs)
		{
			return (this->first == rhs.first) &&
				   (this.second == rhs.second);
		}
	public:
		first_type first;
		second_type second;
	};

	//template<typename Type1, typename Type2>
	//pair<Type1, Type2> make_pair(Type1 lhs, Type2 rhs);
	
	//template<typename Type1, typename Type2>
	//pair<Type1, Type2> make_pair(Type1 &&lhs, Type2 &&rhs);
	
	//template<typename Type1, typename Type2>
	//constexpr pair<Type1, Type2> make_pair(Type1 &&lhs, Type2 &&rhs);
	
}

}
	
#endif // LIBCPP_UTILITY
